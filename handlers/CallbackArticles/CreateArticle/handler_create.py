from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import asyncio

from keyboards.keyboards import get_list_rewards
from utils.monitor import get_product_info, get_reviews
from utils.monitoring_manager import monitoring_manager
from settings.config import user_tasks, user_products
from handlers.router import router, db_queries
from settings.config import logger


@router.message(F.text.regexp(r"^\d{6,}$"))
async def handle_article_input(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ —é–∑–µ—Ä–∞."""

    article = message.text.strip()
    user_id = message.chat.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞: {message.text}")

    if await db_queries.is_article_exists(user_id, article):
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
        return

    try:
        product = await get_product_info(article)
        saved_product = await db_queries.add_product(
            user_id=user_id,
            article=article,
            name=product["name"],
            root_id=product["root"]
        )

        user_products[user_id] = product

        async def monitor_task():
            seen_ids = set()
            try:
                existing_reviews = await get_reviews(product["root"])
                seen_ids.update(r["id"] for r in existing_reviews)
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã: {e}")

            while True:
                try:
                    reviews = await get_reviews(product["root"])
                    new_reviews = [
                        r for r in reviews
                        if r["id"] not in seen_ids and r["rating"] <= 3
                    ]
                    for r in new_reviews:
                        seen_ids.add(r["id"])
                        await db_queries.add_review(saved_product.id, r)
                        dt = r["datetime"].strftime("%Y-%m-%d %H:%M:%S")

                        await message.answer(
                            f"üî¥ <b>–ù–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤</b>\n"
                            f"üì¶ –¢–æ–≤–∞—Ä: {product['name']}\n"
                            f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: {r['rating']}/5\n"
                            f"üí¨ –û—Ç–∑—ã–≤: \"{r['text']}\"\n"
                            f"üë§ –ê–≤—Ç–æ—Ä: {r['author']}\n"
                            f"üïí –î–∞—Ç–∞: {dt}\n"
                            f"üëç –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞: {r['advantages'] or '‚Äî'}\n"
                            f"üëé –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: {r['disadvantages'] or '‚Äî'}",
                            parse_mode="HTML"
                        )
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
                await asyncio.sleep(1800)

        task = asyncio.create_task(monitor_task())
        user_tasks[user_id] = task
        monitoring_manager.add_task(user_id, article, task)

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product['name']}\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.",
            reply_markup=get_list_rewards()
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
